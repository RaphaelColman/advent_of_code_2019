module AoC5.AsteroidsSpec (spec) where

import Test.Hspec
import AoC5.Asteroids
import Common.Intcode
import System.IO
import Data.Sequence (Seq(..)) 
import qualified Data.Sequence as Seq

spec :: Spec
spec = do
  describe "Can do part 1" $ do
    it "reads in puzzle input and produces correct answer" $ do
      getOutput (runIntCode mem) `shouldBe` Just 4511442

  describe "Part 2 tests" $ do
    it "can compare in position mode" $ do
      getOutput (runIntCode mem2) `shouldBe` Just 1
      getOutput (runIntCode mem3) `shouldBe` Just 0

    it "can compare in immediate mode" $ do
      getOutput (runIntCode mem4) `shouldBe` Just 1
      getOutput (runIntCode mem5) `shouldBe` Just 0

    
    it "can jump in position mode" $ do
      getOutput (runIntCode mem6) `shouldBe` Just 1
      getOutput (runIntCode mem7) `shouldBe` Just 0

    it "can do a combination" $ do
      getOutput (runIntCode mem8) `shouldBe` Just 1000

mem2 :: Memory
mem2 = Mem 0 (Seq.fromList [3,9,8,9,10,9,4,9,99,-1,8]) [8] []

mem3 :: Memory
mem3 = Mem 0 (Seq.fromList [3,9,7,9,10,9,4,9,99,-1,8]) [10] []

mem4 :: Memory
mem4 = Mem 0 (Seq.fromList [3,3,1108,-1,8,3,4,3,99]) [8] []

mem5 :: Memory
mem5 = Mem 0 (Seq.fromList [3,3,1107,-1,8,3,4,3,99]) [10] []

mem6 :: Memory
mem6 = Mem 0 (Seq.fromList [3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9]) [10] []

mem7 :: Memory
mem7 = Mem 0 (Seq.fromList [3,3,1105,-1,9,1101,0,0,12,4,12,99,1]) [0] [] --NB no tests for jumpIfTrue


mem8 :: Memory
mem8 = Mem 0 (Seq.fromList [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
                           1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
                           999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99]) [8] []

mem :: Memory
mem = Mem 0 (Seq.fromList input) [1] []

getOutput :: Maybe Memory -> Maybe Int
getOutput = fmap (head . outputs)

input :: [Int]
input = [3,225,1,225,6,6,1100,1,238,225,104,0,101,71,150,224,101,-123,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,2,205,209,224,1001,224,-3403,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1101,55,24,224,1001,224,-79,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1,153,218,224,1001,224,-109,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1002,201,72,224,1001,224,-2088,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1102,70,29,225,102,5,214,224,101,-250,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1101,12,52,225,1101,60,71,225,1001,123,41,224,1001,224,-111,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1102,78,66,224,1001,224,-5148,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,29,77,225,1102,41,67,225,1102,83,32,225,1101,93,50,225,1102,53,49,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,677,224,1002,223,2,223,1005,224,329,101,1,223,223,7,677,677,224,1002,223,2,223,1005,224,344,1001,223,1,223,7,226,677,224,102,2,223,223,1006,224,359,101,1,223,223,1108,226,226,224,1002,223,2,223,1005,224,374,1001,223,1,223,8,226,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,404,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,419,101,1,223,223,1007,677,677,224,1002,223,2,223,1005,224,434,101,1,223,223,7,677,226,224,102,2,223,223,1006,224,449,1001,223,1,223,1008,226,677,224,1002,223,2,223,1006,224,464,101,1,223,223,8,677,677,224,1002,223,2,223,1006,224,479,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,494,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,509,101,1,223,223,107,226,226,224,1002,223,2,223,1006,224,524,1001,223,1,223,107,677,677,224,1002,223,2,223,1005,224,539,101,1,223,223,1007,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,108,677,677,224,102,2,223,223,1005,224,569,101,1,223,223,107,677,226,224,102,2,223,223,1005,224,584,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,599,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,614,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,629,1001,223,1,223,1008,677,677,224,102,2,223,223,1006,224,644,101,1,223,223,1007,226,677,224,102,2,223,223,1005,224,659,101,1,223,223,108,226,677,224,102,2,223,223,1006,224,674,101,1,223,223,4,223,99,226]
